/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedDashboardIndexImport } from './routes/_authenticated/dashboard/index'
import { Route as AuthenticatedSearchIndexImport } from './routes/_authenticated/search/index'
import { Route as UnathenticatedImport } from './routes/_unathenticated'
import { Route as UnathenticatedAboutIndexImport } from './routes/_unathenticated/about/index'
import { Route as UnathenticatedHowIndexImport } from './routes/_unathenticated/how/index'
import { Route as UnathenticatedIndexImport } from './routes/_unathenticated/index'

// Create/Update Routes

const UnathenticatedRoute = UnathenticatedImport.update({
  id: '/_unathenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const UnathenticatedIndexRoute = UnathenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UnathenticatedRoute,
} as any)

const UnathenticatedHowIndexRoute = UnathenticatedHowIndexImport.update({
  id: '/how/',
  path: '/how/',
  getParentRoute: () => UnathenticatedRoute,
} as any)

const UnathenticatedAboutIndexRoute = UnathenticatedAboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => UnathenticatedRoute,
} as any)

const AuthenticatedSearchIndexRoute = AuthenticatedSearchIndexImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedDashboardIndexRoute =
  AuthenticatedDashboardIndexImport.update({
    id: '/dashboard/',
    path: '/dashboard/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_unathenticated': {
      id: '/_unathenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnathenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_unathenticated/': {
      id: '/_unathenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof UnathenticatedIndexImport
      parentRoute: typeof UnathenticatedImport
    }
    '/_authenticated/dashboard/': {
      id: '/_authenticated/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/search/': {
      id: '/_authenticated/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof AuthenticatedSearchIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_unathenticated/about/': {
      id: '/_unathenticated/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof UnathenticatedAboutIndexImport
      parentRoute: typeof UnathenticatedImport
    }
    '/_unathenticated/how/': {
      id: '/_unathenticated/how/'
      path: '/how'
      fullPath: '/how'
      preLoaderRoute: typeof UnathenticatedHowIndexImport
      parentRoute: typeof UnathenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardIndexRoute: typeof AuthenticatedDashboardIndexRoute
  AuthenticatedSearchIndexRoute: typeof AuthenticatedSearchIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardIndexRoute: AuthenticatedDashboardIndexRoute,
  AuthenticatedSearchIndexRoute: AuthenticatedSearchIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface UnathenticatedRouteChildren {
  UnathenticatedIndexRoute: typeof UnathenticatedIndexRoute
  UnathenticatedAboutIndexRoute: typeof UnathenticatedAboutIndexRoute
  UnathenticatedHowIndexRoute: typeof UnathenticatedHowIndexRoute
}

const UnathenticatedRouteChildren: UnathenticatedRouteChildren = {
  UnathenticatedIndexRoute: UnathenticatedIndexRoute,
  UnathenticatedAboutIndexRoute: UnathenticatedAboutIndexRoute,
  UnathenticatedHowIndexRoute: UnathenticatedHowIndexRoute,
}

const UnathenticatedRouteWithChildren = UnathenticatedRoute._addFileChildren(
  UnathenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof UnathenticatedRouteWithChildren
  '/': typeof UnathenticatedIndexRoute
  '/dashboard': typeof AuthenticatedDashboardIndexRoute
  '/search': typeof AuthenticatedSearchIndexRoute
  '/about': typeof UnathenticatedAboutIndexRoute
  '/how': typeof UnathenticatedHowIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthenticatedRouteWithChildren
  '/': typeof UnathenticatedIndexRoute
  '/dashboard': typeof AuthenticatedDashboardIndexRoute
  '/search': typeof AuthenticatedSearchIndexRoute
  '/about': typeof UnathenticatedAboutIndexRoute
  '/how': typeof UnathenticatedHowIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_unathenticated': typeof UnathenticatedRouteWithChildren
  '/_unathenticated/': typeof UnathenticatedIndexRoute
  '/_authenticated/dashboard/': typeof AuthenticatedDashboardIndexRoute
  '/_authenticated/search/': typeof AuthenticatedSearchIndexRoute
  '/_unathenticated/about/': typeof UnathenticatedAboutIndexRoute
  '/_unathenticated/how/': typeof UnathenticatedHowIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/' | '/dashboard' | '/search' | '/about' | '/how'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/' | '/dashboard' | '/search' | '/about' | '/how'
  id:
  | '__root__'
  | '/_authenticated'
  | '/_unathenticated'
  | '/_unathenticated/'
  | '/_authenticated/dashboard/'
  | '/_authenticated/search/'
  | '/_unathenticated/about/'
  | '/_unathenticated/how/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  UnathenticatedRoute: typeof UnathenticatedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  UnathenticatedRoute: UnathenticatedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/_unathenticated"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/dashboard/",
        "/_authenticated/search/"
      ]
    },
    "/_unathenticated": {
      "filePath": "_unathenticated.tsx",
      "children": [
        "/_unathenticated/",
        "/_unathenticated/about/",
        "/_unathenticated/how/"
      ]
    },
    "/_unathenticated/": {
      "filePath": "_unathenticated/index.tsx",
      "parent": "/_unathenticated"
    },
    "/_authenticated/dashboard/": {
      "filePath": "_authenticated/dashboard/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/search/": {
      "filePath": "_authenticated/search/index.tsx",
      "parent": "/_authenticated"
    },
    "/_unathenticated/about/": {
      "filePath": "_unathenticated/about/index.tsx",
      "parent": "/_unathenticated"
    },
    "/_unathenticated/how/": {
      "filePath": "_unathenticated/how/index.tsx",
      "parent": "/_unathenticated"
    }
  }
}
ROUTE_MANIFEST_END */
